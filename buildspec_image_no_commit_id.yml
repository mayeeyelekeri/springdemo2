version: 0.2

env: 
  variables: 
    task_name: "springdemo" 
    container_name: "SpringDemo" 
    postfix: "dkr.ecr.us-east-1.amazonaws.com"
    
  parameter-store:
      springdemo_image_repo: /dev/ecs/ecr_repository
      container_name: /dev/ecs/container_name
      image_name: /dev/ecs/image_name
phases:

  install:

    commands:
      - echo Pre-Build started on `date`

  build:
    commands:
      - echo Build started on `date`
      - echo after install 
      - javac --version 
      - java --version
      - which java 
      - which javac 
      - ls -lrt /usr/bin/java 
      - ls -lrt /usr/bin/javac 
      - mvn clean package -Dmaven.test.skip=true
      - echo Build Ended on `date`
      - echo listing all tasks during build phase 
      - aws ecs list-task-definitions 

  post_build:
    commands:
      - echo bucket name is $BUCKET_NAME
      - ls -lrt target 
      - cp target/springdemo2-1.0.0.jar codedeploy 
      - ls -lrt codedeploy
      
      # zipping is causing the issue during codedeploy 
      # - cd codedeploy && zip -r ../springdemo2.zip * 
      # 
      - pwd 
      - ls -lrt
      
      # Create an image and push to ECR 
      - echo image repo $springdemo_image_repo
      - accountID=`aws sts get-caller-identity --query Account --output text`
      - echo accountID = $accountID
      - echo aws region = $AWS_REGION 
      - echo account ID prefix value = $accountId.dkr.ecr.us-east-1.amazonaws.com 
      - accountName=$accountID.$postfix
      - echo accountName = $accountName 
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $accountName 
      #- commitId=`git log --format="%H" -n 1`
      # Get current time for commitId
      - commitId=`date +%s`
      
      - echo commitID is $commitId
      - docker build -t $springdemo_image_repo:$commitId .
      - docker push $springdemo_image_repo:$commitId
      - docker images 
      - echo listing all tasks after push to ECR 
      - aws ecs list-task-definitions 
      
      # Generate Imagedefinitions.json file which is required to perform deployment 
      - printf '[{"name":"%s","imageUri":"%s%s%s"}]' "$container_name" "$accountName"/"$image_name":"$commitId" > imagedefinitions.json
      - cat imagedefinitions.json 
      
      # Generate appspec.yaml file 
      # Get new task definition version 
      - cp codedeploy/appspec.yml appspec.yml
      - taskDefVersion="testval"
      - taskDefVersion=`./getNewTaskDefinitionRevision.sh $accountID $task_name`  
      - taskDefVersion="arn:aws:ecs:us-east-1:975050342959:task-definition/springdemo:1"
      - echo "new task def: $taskDefVersion" 
      - sed -i -e "s/TASKDEF/${taskDefVersion}/" appspec.yml 
      - cat appspec.yml
      - echo listing all tasks after post_build phase 
      - aws ecs list-task-definitions 
      - taskVer=`aws ecs describe-task-definition --task-definition $task_name --query "taskDefinition.revision"`
      - taskVer=$((taskVer + 1))
      - echo new Task ver = $taskVer

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yml
  discard-paths: no  

reports: 
  SureFireReports:
    files:
      - '**/*'
    base-directory: 'target/surefire-reports'

